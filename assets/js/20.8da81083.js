(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{412:function(e,s,a){"use strict";a.r(s);var n=a(45),t=Object(n.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"package-json-依赖项版本号前面的-有什么用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#package-json-依赖项版本号前面的-有什么用"}},[e._v("#")]),e._v(" package.json 依赖项版本号前面的 ~ ^ 有什么用？")]),e._v(" "),a("ul",[a("li",[e._v("~ 会匹配最近的小版本依赖包，比如~1.2.3会匹配所有1.2.x版本，但是不包括1.3.0")]),e._v(" "),a("li",[e._v("^ 会匹配最新的大版本依赖包，比如^1.2.3会匹配所有1.x.x的包，包括1.3.0，但是不包括2.0.0")]),e._v(" "),a("li",[e._v("不写前缀，只写版本号就不会有更新问题（只是说你这个库的版本不会变，但是如果第三方的依赖库的依赖变化了，你项目的依赖也会变）")])]),e._v(" "),a("h2",{attrs:{id:"项目中使用-package-lock-json-锁版本问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目中使用-package-lock-json-锁版本问题"}},[e._v("#")]),e._v(" 项目中使用 package-lock.json 锁版本问题")]),e._v(" "),a("p",[e._v("package-lock.json 的出现是为了解决不同情况下安装包不一致的问题，在执行 "),a("code",[e._v("npm install")]),e._v(" 的时候，会根据 package.json 文件安装依赖，生成对应依赖版本的 package-lock.json 文件，里面详细描述了每个依赖包的版本。之后比如其他组员把代码拉下来后，执行 "),a("code",[e._v("npm ci")]),e._v(" 就会根据 package-lock.json 去下载依赖包，这样就保证了依赖库的不变。")]),e._v(" "),a("h2",{attrs:{id:"peerdependencies-有什么用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#peerdependencies-有什么用"}},[e._v("#")]),e._v(" peerDependencies 有什么用")]),e._v(" "),a("p",[e._v("假设一个项目有如下依赖项：")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"dependencies"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"a"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1.0.0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"b"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1.0.0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"c"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1.0.0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("并且 b 和 c 也各自有依赖项 a。那么下载依赖后的项目目录是这样的：")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n├── project\n│   └── node_modules\n│       ├── a\n│       ├── b\n│       │   └── nodule_modules\n│       │       └── a\n│       └── c\n│       │   └── nodule_modules\n│       │       └── a\n")])])]),a("p",[e._v("这样会有一个问题，依赖 a 会被重复安装 3 次。这时可以使用 "),a("code",[e._v("peerDependencies")]),e._v("，它可以避免相同的依赖被重复安装。"),a("br"),e._v("\n现在只需要在 b 和 c 的 package.json 文件加上以下代码：")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"peerDependencies"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"a"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1.0.0"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("这样在安装时就可以避免重复安装依赖了。现在下载依赖后的目录为：")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n├── helloWorld\n│   └── node_modules\n│       ├── a\n│       ├── b\n│       └── c\n")])])]),a("ul",[a("li",[e._v("如果用户显式依赖了核心库，则可以忽略各插件的 "),a("code",[e._v("peerDependency")]),e._v(" 声明；")]),e._v(" "),a("li",[e._v("如果用户没有显式依赖核心库，则按照插件 "),a("code",[e._v("peerDependencies")]),e._v(" 中声明的版本将库安装到项目根目录中；")])]),e._v(" "),a("p",[e._v("注意，这里由于根据 "),a("code",[e._v("peerDependencies")]),e._v(" 定义了 a 的版本，其它依赖于 a 的库有可能因为版本不兼容报错，这个时候就需要人为去排查原因。")]),e._v(" "),a("h2",{attrs:{id:"require-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#require-原理"}},[e._v("#")]),e._v(" require 原理")]),e._v(" "),a("p",[e._v("当 Node 遇到 require(X) 时，按下面的顺序处理。")]),e._v(" "),a("ol",[a("li",[e._v("如果 X 是内置模块（比如 require('http'）)"),a("br"),e._v("\na. 返回该模块。"),a("br"),e._v("\nb. 不再继续执行。")]),e._v(" "),a("li",[e._v('如果 X 以 "./" 或者 "/" 或者 "../" 开头'),a("br"),e._v("\na. 根据 X 所在的父模块，确定 X 的绝对路径。"),a("br"),e._v("\nb. 将 X 当成文件，依次查找下面文件，只要其中有一个存在，就返回该文件，不再继续执行。"),a("br"),e._v(" "),a("code",[e._v("X")]),e._v("、"),a("code",[e._v("X.js")]),e._v("、"),a("code",[e._v("X.json")]),e._v("、"),a("code",[e._v("X.node")]),a("br"),e._v("\nc. 将 X 当成目录，依次查找下面文件，只要其中有一个存在，就返回该文件，不再继续执行。"),a("br"),e._v(" "),a("code",[e._v("X/package.json（main字段）")]),e._v("、"),a("code",[e._v("X/index.js")]),e._v("、"),a("code",[e._v("X/index.json")]),e._v("、"),a("code",[e._v("X/index.node")])]),e._v(" "),a("li",[e._v("如果 X 不带路径"),a("br"),e._v("\na. 根据 X 所在的父模块，确定 X 可能的安装目录（名称为 node_modules）。"),a("br"),e._v("\nb. 依次在每个目录中，将 X 当成文件名或目录名加载。")]),e._v(" "),a("li",[e._v('抛出 "not found"')])]),e._v(" "),a("p",[e._v("参考资料："),a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2015/05/require.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.ruanyifeng.com/blog/2015/05/require.html"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=t.exports}}]);